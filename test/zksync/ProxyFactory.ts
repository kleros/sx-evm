import { expect } from "chai";
import { Wallet, Provider, Contract } from "zksync-web3";
import { utils } from "ethers";
import * as hre from "hardhat";
import { Deployer } from "@matterlabs/hardhat-zksync-deploy";

const RICH_WALLET_PK = "0x7726827caac94a7f9e1b160f7ea819f172f7b6f9d2a97f992c38edeab82d4110";

async function deployProxyFactory(deployer: Deployer): Promise<Contract> {
  const artifact = await deployer.loadArtifact("ProxyFactory");
  return await deployer.deploy(artifact, []);
}

async function deploySpaceProxy(deployer: Deployer, proxyFactory: Contract, spaceImplementation: String, saltNonce: number): Promise<Contract> {
  const artifact = await deployer.loadArtifact("Space");
  return await deployer.deploy(artifact, [proxyFactory.address]);
}

describe("Greeter", function () {
  it("Should return the new greeting once it's changed", async function () {
    const provider = Provider.getDefaultProvider();
    console.log(provider);
    const wallet = new Wallet(RICH_WALLET_PK, provider);
    console.log(await wallet.getBalance());
    const deployer = new Deployer(hre, wallet);

    const proxyFactory = await deployProxyFactory(deployer);
    const addr = await proxyFactory.predictProxyAddress(wallet.address, utils.solidityKeccak256([ "int16", "uint48" ], [ -1, 12 ]));
    console.log(addr);

    // Deploy Space Implementation
    const spaceArtifact = await deployer.loadArtifact("Space");
    const spaceImplementation = await deployer.deploy(spaceArtifact, []);
    console.log(spaceImplementation.address);

    // Deploy Space Proxy
    const spaceInitializer = "0xf8b669d600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001";
    const ret = await proxyFactory.deployProxy(spaceImplementation.address, spaceInitializer, 0);
    const rec = await ret.wait();
    console.log(rec);

    await expect(proxyFactory.deployProxy(spaceImplementation.address, spaceInitializer, 1)).to.emit(proxyFactory, "ProxyDeployed");
  });
});